// Script generated by swake
// Contents of Skeleton.swift:
import Cocoa

typealias TaskClosure = [String]? -> Void

func sh(command: String, arguments: [String]? = nil) -> Int32 {
    var task = NSTask()
    
    if !NSFileManager.defaultManager().fileExistsAtPath(command) {
        return 1
    }
    
    task.launchPath = command    
    
    if let arguments = arguments  {
        task.arguments = arguments.map({ $0 as AnyObject})
    }
    
    task.launch()
    task.waitUntilExit()
    return task.terminationStatus
}

var currentNamespace: String? = nil

func namespace(name: String, work: () -> Void) {
    currentNamespace = name
    work()
    currentNamespace = nil
}

var tasks: [String: TaskClosure] = Dictionary()
var prerequisites: [String: [String]] = Dictionary()

func task(name: String, _ taskPrerequisites: [String]? = nil, work: TaskClosure) {
    
    var key = name
    var namespace: String?
    if let currentNamespace = currentNamespace {
        namespace = currentNamespace
        key = currentNamespace + ":" + name
    }
    
    if let taskPrerequisites = taskPrerequisites {
        prerequisites[name] = taskPrerequisites
        
        let closureWithDependencies: TaskClosure = { args in
            
            for taskName in taskPrerequisites {
                
                var taskKey = taskName
                if let namespace = namespace {
                    taskKey = namespace + ":" + taskName
                }
                
                tasks[taskKey]!(args)
            }
            work(args)
        }
        tasks[key] = closureWithDependencies
    } else {
        tasks[key] = work
    }
    
}

// Contents of Swakefile: